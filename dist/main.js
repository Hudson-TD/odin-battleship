(()=>{var e={817:e=>{e.exports={renderPlayerCreationEl:function(){let e=document.querySelector("body"),t=document.createElement("div");t.classList.add("player-creation-container");let r=document.createElement("p");r.innerText="You are about to enter unfamiliar waters in an effort to neutralize enemy ships. Due to thick fog our strategy is simple, fire artillery and observe any contact. Intel suggests the enemy fleet contains 5 ships of varying sizes...\n  \n  Instructions:\n  \n  Using arial reconnaissance order fire on mapped coordinates. Hits will be recorded with an explosion marker, while misses will be indicated with a water marker.";let i=document.createElement("form");i.setAttribute("name","player-creation-form"),i.setAttribute("class","player-creation-form");let a=document.createElement("input");a.setAttribute("id","playerName"),a.setAttribute("type","text"),a.setAttribute("min","1"),a.required=!0,a.setAttribute("max","25"),a.setAttribute("placeholder","Enter Player Name");let n=document.createElement("button");n.setAttribute("id","playerSubmit"),n.setAttribute("type","submit"),n.setAttribute("for","player-creation-form"),n.innerText="Launch Fleet",e.appendChild(t),t.appendChild(i),i.appendChild(r),i.appendChild(a),i.appendChild(n)}}},498:(e,t,r)=>{const{ship:i}=r(643);e.exports={gameboard:()=>{let e=[];return{isGameOver:!1,grid:(()=>{for(let t=0;t<10;t++)for(let r=0;r<10;r++)e.push({x:t,y:r,shipName:void 0,attacked:!1});return e})(),missedShots:[],sunkShips:[],myFleet:[i("Carrier"),i("Battleship"),i("Destroyer"),i("Submarine"),i("Patrol Boat")],receiveAttack(e,t){this.grid.forEach((r=>{if(r.x===e&&r.y===t)if(r.attacked=!0,void 0===r.shipName)this.missedShots.push({x:e,y:t});else switch(r.shipName){case"Carrier":this.myFleet[0].hit();break;case"Battleship":this.myFleet[1].hit();break;case"Destroyer":this.myFleet[2].hit();break;case"Submarine":this.myFleet[3].hit();break;case"Patrol Boat":this.myFleet[4].hit()}}))},plotFleet(){this.myFleet.forEach((e=>{e.location.forEach((t=>{this.grid.forEach((r=>{r.x===t.x&&r.y===t.y&&(r.shipName=e.name)}))}))}))},checkSunkShips(){this.myFleet.forEach((e=>{!0===e.sunk&&this.sunkShips.push(String(e.name))}))},checkGameOver(){5===this.sunkShips.length&&(this.isGameOver=!0)}}}}},225:e=>{const t=()=>Math.floor(10*Math.random());e.exports={randomNumZeroToNine:t,randomDirection:()=>{let e;return e=t()<=4?"horizontal":"vertical",e},determineSafePath:(e,t)=>{let r;return"horizontal"===e?r=t.x<=4?"right":"left":"vertical"===e&&(r=t.y<=4?"down":"up"),r}}},507:(e,t,r)=>{const{gameboard:i}=r(498);e.exports={player:e=>({name:e,isTurn:!1,board:i()})}},643:(e,t,r)=>{const{randomNumZeroToNine:i,randomDirection:a,determineSafePath:n}=r(225);e.exports={ship:e=>{const t=e=>{switch(e){case"Carrier":return Number(5);case"Battleship":return Number(4);case"Destroyer":case"Submarine":return Number(3);case"Patrol Boat":return Number(2);default:throw new Error("Invalid ship type provided")}};return{name:e,length:t(e),hits:0,sunk:!1,location:(e=>{let t=[],r={x:i(),y:i()},s=a();return t=((e,t,r)=>{let i=[];if(i.push(r),"left"==e)for(let e=1;e<t;e++)i.push({x:r.x-e,y:r.y});else if("right"==e)for(let e=1;e<t;e++)i.push({x:r.x+e,y:r.y});else if("up"==e)for(let e=1;e<t;e++)i.push({x:r.x,y:r.y-e});else if("down"==e)for(let e=1;e<t;e++)i.push({x:r.x,y:r.y+e});return i})(n(s,r),e,r),t})(t(e)),hit(){this.hits+=1,this.isSunk()},isSunk(){this.hits===this.length&&(this.sunk=!0)}}}}}},t={};function r(i){var a=t[i];if(void 0!==a)return a.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,r),n.exports}(()=>{const{renderPlayerCreationEl:e}=r(817),{player:t}=r(507);({playerOneName:void 0,playerTwoName:"Computer",playerOne:void 0,PlayerTwo:void 0,init:function(){e(),this.cacheDom(),this.startEventListening()},cacheDom:function(){this.formContainer=document.querySelector(".player-creation-container"),this.formSubmitBtn=document.getElementById("playerSubmit"),this.formInput=document.getElementById("playerName")},startEventListening:function(){this.formSubmitBtn.addEventListener("click",(e=>{e.preventDefault(),this.playerOneName=this.formInput.value,this.formContainer.classList.add("hidden"),this.handleGameSetup()}))},handleGameSetup:function(){this.playerOne=t(this.playerOneName),this.PlayerTwo=t(this.playerTwoName),console.log(this.playerOne),console.log(this.PlayerTwo)}}).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,