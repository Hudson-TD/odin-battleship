(()=>{var e={817:e=>{e.exports={renderPlayerCreationEl:function(){const e=document.querySelector("body");let t=document.createElement("div");t.classList.add("player-creation-container");let r=document.createElement("p");r.innerText="You are about to enter unfamiliar waters in an effort to neutralize enemy ships. Due to thick fog our strategy is simple, fire artillery and observe any contact. Intel suggests the enemy fleet contains 5 ships of varying sizes...\n  \n  Instructions:\n  \n  Using arial reconnaissance order fire on mapped coordinates. Hits will be recorded with an explosion marker, while misses will be indicated with a water marker.";let a=document.createElement("form");a.setAttribute("name","player-creation-form"),a.setAttribute("class","player-creation-form");let i=document.createElement("input");i.setAttribute("id","playerName"),i.setAttribute("type","text"),i.setAttribute("min","1"),i.required=!0,i.setAttribute("max","25"),i.setAttribute("placeholder","Player Name");let n=document.createElement("button");n.setAttribute("id","playerSubmit"),n.setAttribute("type","submit"),n.setAttribute("for","player-creation-form"),n.innerText="Launch Fleet",e.appendChild(t),t.appendChild(a),a.appendChild(r),a.appendChild(i),a.appendChild(n)},generateGameboardEl:function(e){const t=[...e.board.grid],r=document.querySelector(".main-content-container"),a=document.createElement("div"),i=document.createElement("table");i.setAttribute("class","gameboard-table");const n=document.createElement("th");n.innerText=`${e.name}'s Fleet`,a.appendChild(n);for(let r=0;r<10;r++){const a=document.createElement("tr");a.setAttribute("class","gameboard-row");for(let i=0;i<10;i++){const n=10*r+i;if(n<t.length){const r=document.createElement("td");a.appendChild(r),r.setAttribute("data-x",`${t[n].x}`),r.setAttribute("data-y",`${t[n].y}`),r.setAttribute("data-attacked",`${t[n].attacked}`),r.setAttribute("data-ship",`${t[n].shipName}`),r.setAttribute("class","gameboard-tile"),"Computer"===e.name?r.classList.add("enemy-tile"):"Computer"!==e.name&&r.classList.add("player-tile")}}i.appendChild(a)}a.appendChild(i),r.appendChild(a)},handleHitsAndMisses:function(){document.querySelectorAll(".gameboard-tile").forEach((e=>{let t=e.getAttribute("data-attacked"),r=e.getAttribute("data-ship");"true"===t&&"undefined"===r&&(e.classList.remove("enemy-tile"),e.classList.add("missed")),"true"===t&&"undefined"!==r&&(e.classList.remove("enemy-tile"),e.classList.add("hit"))}))},handlePlayerGrid:function(){document.querySelectorAll(".player-tile").forEach((e=>{"undefined"!==e.getAttribute("data-ship")&&e.classList.add("occupied")}))}}},404:(e,t,r)=>{const{renderPlayerCreationEl:a,generateGameboardEl:i,handleHitsAndMisses:n,handlePlayerGrid:s}=r(817),{player:o}=r(507);e.exports={game:()=>({playerOneName:void 0,playerTwoName:"Computer",playerOne:void 0,PlayerTwo:void 0,init:function(){a(),this.cacheDom(),this.startEventListening()},cacheDom:function(){this.formContainer=document.querySelector(".player-creation-container"),this.formSubmitBtn=document.getElementById("playerSubmit"),this.formInput=document.getElementById("playerName")},startEventListening:function(){this.formSubmitBtn.addEventListener("click",(e=>{e.preventDefault(),this.playerOneName=this.formInput.value,this.formContainer.classList.add("hidden"),this.handleGameSetup()}))},handleGameSetup:function(){this.playerOne=o(this.playerOneName),this.PlayerTwo=o(this.playerTwoName),this.handlePlotting(),i(this.playerOne),i(this.PlayerTwo),s(),this.startAttackListening()},startAttackListening:function(){document.querySelectorAll(".enemy-tile").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),e.target.setAttribute("data-attacked","true");let t=e.target.getAttribute("data-x"),r=e.target.getAttribute("data-y");this.PlayerTwo.board.receiveAttack(t,r),n()}),{once:!0})}))},handlePlotting:function(){this.playerOne.board.plotFleet(),this.PlayerTwo.board.plotFleet()}})}},498:(e,t,r)=>{const{ship:a}=r(643);e.exports={gameboard:()=>{let e=[];return{isGameOver:!1,grid:(()=>{for(let t=0;t<10;t++)for(let r=0;r<10;r++)e.push({x:t,y:r,shipName:void 0,attacked:!1});return e})(),missedShots:[],sunkShips:[],myFleet:[a("Carrier"),a("Battleship"),a("Destroyer"),a("Submarine"),a("Patrol Boat")],receiveAttack:function(e,t){console.log(`Hit logged at ${e},${t}`),this.grid.forEach((r=>{if(r.x==e&&r.y==t)if(r.attacked=!0,void 0===r.shipName)this.missedShots.push({x:e,y:t});else switch(r.shipName){case"Carrier":this.myFleet[0].hit();break;case"Battleship":this.myFleet[1].hit();break;case"Destroyer":this.myFleet[2].hit();break;case"Submarine":this.myFleet[3].hit();break;case"Patrol Boat":this.myFleet[4].hit()}})),this.checkSunkShips()},plotFleet:function(){this.myFleet.forEach((e=>{e.location.forEach((t=>{this.grid.forEach((r=>{r.x===t.x&&r.y===t.y&&(r.shipName=e.name)}))}))}))},checkSunkShips:function(){this.myFleet.forEach((e=>{!0!==e.sunk||this.sunkShips.includes(e.name)||this.sunkShips.push(String(e.name)),this.checkGameOver()}))},checkGameOver:function(){5==this.sunkShips.length&&(this.isGameOver=!0,console.log("Game Over Triggered"))}}}}},507:(e,t,r)=>{const{gameboard:a}=r(498);e.exports={player:e=>({name:e,isTurn:!1,board:a()})}},643:e=>{e.exports={ship:e=>({name:e,length:(e=>{switch(e){case"Carrier":return Number(5);case"Battleship":return Number(4);case"Destroyer":case"Submarine":return Number(3);case"Patrol Boat":return Number(2);default:throw new Error("Invalid ship type provided")}})(e),hits:0,sunk:!1,location:function(e){switch(e){case"Carrier":return[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:0,y:4}];case"Battleship":return[{x:9,y:2},{x:9,y:3},{x:9,y:4},{x:9,y:5}];case"Destroyer":return[{x:5,y:4},{x:6,y:4},{x:7,y:4}];case"Submarine":return[{x:8,y:0},{x:8,y:1},{x:8,y:2}];case"Patrol Boat":return[{x:5,y:7},{x:6,y:7}];default:throw new Error("Error generating coordinates")}}(e),hit:function(){this.hits+=1,console.log("Hit detected!"),this.isSunk()},isSunk:function(){this.hits===this.length&&(this.sunk=!0,console.log(`${this.name} has been sunk`))}})}}},t={};function r(a){var i=t[a];if(void 0!==i)return i.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,r),n.exports}(()=>{const{game:e}=r(404);e().init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQnZELElBQWpCd0QsRUFDSCxPQUFPQSxFQUFhdkcsUUFHckIsSUFBSUQsRUFBU3FHLEVBQXlCRSxHQUFZLENBR2pEdEcsUUFBUyxDQUFDLEdBT1gsT0FIQXdHLEVBQW9CRixHQUFVdkcsRUFBUUEsRUFBT0MsUUFBU3FHLEdBRy9DdEcsRUFBT0MsT0FDZixDLE1DdEJBLE1BQU0sS0FBRTZDLEdBQVMsRUFBUSxLQUVUQSxJQUNSTSxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2RvbUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2dhbWVMb2dpYy5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3NoaXAuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByZW5kZXJQbGF5ZXJDcmVhdGlvbkVsKCkge1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XG4gIGxldCBjb250YWluZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnRhaW5lckVsLmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXItY3JlYXRpb24tY29udGFpbmVyXCIpO1xuXG4gIGxldCBvdmVydmlld1RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcblxuICBvdmVydmlld1RleHQuaW5uZXJUZXh0ID0gYFlvdSBhcmUgYWJvdXQgdG8gZW50ZXIgdW5mYW1pbGlhciB3YXRlcnMgaW4gYW4gZWZmb3J0IHRvIG5ldXRyYWxpemUgZW5lbXkgc2hpcHMuIER1ZSB0byB0aGljayBmb2cgb3VyIHN0cmF0ZWd5IGlzIHNpbXBsZSwgZmlyZSBhcnRpbGxlcnkgYW5kIG9ic2VydmUgYW55IGNvbnRhY3QuIEludGVsIHN1Z2dlc3RzIHRoZSBlbmVteSBmbGVldCBjb250YWlucyA1IHNoaXBzIG9mIHZhcnlpbmcgc2l6ZXMuLi5cbiAgXG4gIEluc3RydWN0aW9uczpcbiAgXG4gIFVzaW5nIGFyaWFsIHJlY29ubmFpc3NhbmNlIG9yZGVyIGZpcmUgb24gbWFwcGVkIGNvb3JkaW5hdGVzLiBIaXRzIHdpbGwgYmUgcmVjb3JkZWQgd2l0aCBhbiBleHBsb3Npb24gbWFya2VyLCB3aGlsZSBtaXNzZXMgd2lsbCBiZSBpbmRpY2F0ZWQgd2l0aCBhIHdhdGVyIG1hcmtlci5gO1xuXG4gIGxldCBmb3JtRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgZm9ybUVsLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJwbGF5ZXItY3JlYXRpb24tZm9ybVwiKTtcbiAgZm9ybUVsLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGxheWVyLWNyZWF0aW9uLWZvcm1cIik7XG5cbiAgbGV0IGlucHV0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGlucHV0RWwuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJwbGF5ZXJOYW1lXCIpO1xuICBpbnB1dEVsLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICBpbnB1dEVsLnNldEF0dHJpYnV0ZShcIm1pblwiLCBcIjFcIik7XG4gIGlucHV0RWwucmVxdWlyZWQgPSB0cnVlO1xuICBpbnB1dEVsLnNldEF0dHJpYnV0ZShcIm1heFwiLCBcIjI1XCIpO1xuICBpbnB1dEVsLnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIFwiUGxheWVyIE5hbWVcIik7XG5cbiAgbGV0IGJ0bkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgYnRuRWwuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJwbGF5ZXJTdWJtaXRcIik7XG4gIGJ0bkVsLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJzdWJtaXRcIik7XG4gIGJ0bkVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcInBsYXllci1jcmVhdGlvbi1mb3JtXCIpO1xuICBidG5FbC5pbm5lclRleHQgPSBcIkxhdW5jaCBGbGVldFwiO1xuXG4gIGJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWwpO1xuICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChmb3JtRWwpO1xuICBmb3JtRWwuYXBwZW5kQ2hpbGQob3ZlcnZpZXdUZXh0KTtcbiAgZm9ybUVsLmFwcGVuZENoaWxkKGlucHV0RWwpO1xuICBmb3JtRWwuYXBwZW5kQ2hpbGQoYnRuRWwpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUdhbWVib2FyZEVsKHBsYXllcikge1xuICBjb25zdCBkYXRhQXJyYXkgPSBbLi4ucGxheWVyLmJvYXJkLmdyaWRdO1xuICBjb25zdCBtYWluQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluLWNvbnRlbnQtY29udGFpbmVyXCIpO1xuICBjb25zdCB0YWJsZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xuICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImdhbWVib2FyZC10YWJsZVwiKTtcbiAgY29uc3QgcGxheWVySGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcbiAgcGxheWVySGVhZGluZy5pbm5lclRleHQgPSBgJHtwbGF5ZXIubmFtZX0ncyBGbGVldGA7XG4gIHRhYmxlQ29udGFpbmVyLmFwcGVuZENoaWxkKHBsYXllckhlYWRpbmcpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcbiAgICByb3cuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJnYW1lYm9hcmQtcm93XCIpO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaisrKSB7XG4gICAgICBjb25zdCBkYXRhSW5kZXggPSBpICogMTAgKyBqO1xuXG4gICAgICBpZiAoZGF0YUluZGV4IDwgZGF0YUFycmF5Lmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKFwiZGF0YS14XCIsIGAke2RhdGFBcnJheVtkYXRhSW5kZXhdLnh9YCk7XG4gICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKFwiZGF0YS15XCIsIGAke2RhdGFBcnJheVtkYXRhSW5kZXhdLnl9YCk7XG4gICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKFwiZGF0YS1hdHRhY2tlZFwiLCBgJHtkYXRhQXJyYXlbZGF0YUluZGV4XS5hdHRhY2tlZH1gKTtcbiAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNoaXBcIiwgYCR7ZGF0YUFycmF5W2RhdGFJbmRleF0uc2hpcE5hbWV9YCk7XG4gICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJnYW1lYm9hcmQtdGlsZVwiKTtcbiAgICAgICAgLy8gT25seSBhZGQgZXZlbnQgbGlzdGVuZXJzIHRvIGVuZW15IGdhbWVib2FyZFxuICAgICAgICBpZiAocGxheWVyLm5hbWUgPT09IFwiQ29tcHV0ZXJcIikge1xuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImVuZW15LXRpbGVcIik7XG4gICAgICAgIH0gZWxzZSBpZiAocGxheWVyLm5hbWUgIT09IFwiQ29tcHV0ZXJcIikge1xuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcInBsYXllci10aWxlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRhYmxlLmFwcGVuZENoaWxkKHJvdyk7XG4gIH1cbiAgdGFibGVDb250YWluZXIuYXBwZW5kQ2hpbGQodGFibGUpO1xuICBtYWluQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhYmxlQ29udGFpbmVyKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlSGl0c0FuZE1pc3NlcygpIHtcbiAgY29uc3QgYWxsR3JpZEl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5nYW1lYm9hcmQtdGlsZVwiKTtcbiAgYWxsR3JpZEl0ZW1zLmZvckVhY2goKHRpbGUpID0+IHtcbiAgICBsZXQgc3RhdHVzID0gdGlsZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWF0dGFja2VkXCIpO1xuICAgIGxldCBuYW1lID0gdGlsZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNoaXBcIik7XG4gICAgaWYgKHN0YXR1cyA9PT0gXCJ0cnVlXCIgJiYgbmFtZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGlsZS5jbGFzc0xpc3QucmVtb3ZlKFwiZW5lbXktdGlsZVwiKTtcbiAgICAgIHRpbGUuY2xhc3NMaXN0LmFkZChcIm1pc3NlZFwiKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSBcInRydWVcIiAmJiBuYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aWxlLmNsYXNzTGlzdC5yZW1vdmUoXCJlbmVteS10aWxlXCIpO1xuICAgICAgdGlsZS5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVBsYXllckdyaWQoKSB7XG4gIGNvbnN0IGFsbFBsYXllclRpZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBsYXllci10aWxlXCIpO1xuICBhbGxQbGF5ZXJUaWVzLmZvckVhY2goKHRpbGUpID0+IHtcbiAgICBsZXQgbmFtZSA9IHRpbGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zaGlwXCIpO1xuICAgIGlmIChuYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aWxlLmNsYXNzTGlzdC5hZGQoXCJvY2N1cGllZFwiKTtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyUGxheWVyQ3JlYXRpb25FbCxcbiAgZ2VuZXJhdGVHYW1lYm9hcmRFbCxcbiAgaGFuZGxlSGl0c0FuZE1pc3NlcyxcbiAgaGFuZGxlUGxheWVyR3JpZCxcbn07XG4iLCJjb25zdCB7XG4gIHJlbmRlclBsYXllckNyZWF0aW9uRWwsXG4gIGdlbmVyYXRlR2FtZWJvYXJkRWwsXG4gIGhhbmRsZUhpdHNBbmRNaXNzZXMsXG4gIGhhbmRsZVBsYXllckdyaWQsXG59ID0gcmVxdWlyZShcIi4vZG9tQ29udHJvbGxlclwiKTtcbmNvbnN0IHsgcGxheWVyIH0gPSByZXF1aXJlKFwiLi9wbGF5ZXJcIik7XG5cbmNvbnN0IGdhbWUgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgcGxheWVyT25lTmFtZTogdW5kZWZpbmVkLFxuICAgIHBsYXllclR3b05hbWU6IFwiQ29tcHV0ZXJcIixcbiAgICBwbGF5ZXJPbmU6IHVuZGVmaW5lZCxcbiAgICBQbGF5ZXJUd286IHVuZGVmaW5lZCxcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZW5kZXJQbGF5ZXJDcmVhdGlvbkVsKCk7XG4gICAgICB0aGlzLmNhY2hlRG9tKCk7XG4gICAgICB0aGlzLnN0YXJ0RXZlbnRMaXN0ZW5pbmcoKTtcbiAgICB9LFxuICAgIGNhY2hlRG9tOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmZvcm1Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYXllci1jcmVhdGlvbi1jb250YWluZXJcIik7XG4gICAgICB0aGlzLmZvcm1TdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllclN1Ym1pdFwiKTtcbiAgICAgIHRoaXMuZm9ybUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5ZXJOYW1lXCIpO1xuICAgIH0sXG4gICAgc3RhcnRFdmVudExpc3RlbmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5mb3JtU3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucGxheWVyT25lTmFtZSA9IHRoaXMuZm9ybUlucHV0LnZhbHVlO1xuICAgICAgICB0aGlzLmZvcm1Db250YWluZXIuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgICAgdGhpcy5oYW5kbGVHYW1lU2V0dXAoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaGFuZGxlR2FtZVNldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnBsYXllck9uZSA9IHBsYXllcih0aGlzLnBsYXllck9uZU5hbWUpO1xuICAgICAgdGhpcy5QbGF5ZXJUd28gPSBwbGF5ZXIodGhpcy5wbGF5ZXJUd29OYW1lKTtcbiAgICAgIHRoaXMuaGFuZGxlUGxvdHRpbmcoKTtcbiAgICAgIGdlbmVyYXRlR2FtZWJvYXJkRWwodGhpcy5wbGF5ZXJPbmUpO1xuICAgICAgZ2VuZXJhdGVHYW1lYm9hcmRFbCh0aGlzLlBsYXllclR3byk7XG4gICAgICBoYW5kbGVQbGF5ZXJHcmlkKCk7XG4gICAgICB0aGlzLnN0YXJ0QXR0YWNrTGlzdGVuaW5nKCk7XG4gICAgfSxcbiAgICBzdGFydEF0dGFja0xpc3RlbmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmVuZW15LXRpbGVcIik7XG4gICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUudGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtYXR0YWNrZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgbGV0IHggPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXhcIik7XG4gICAgICAgICAgICBsZXQgeSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEteVwiKTtcbiAgICAgICAgICAgIHRoaXMuUGxheWVyVHdvLmJvYXJkLnJlY2VpdmVBdHRhY2soeCwgeSk7XG4gICAgICAgICAgICBoYW5kbGVIaXRzQW5kTWlzc2VzKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7IG9uY2U6IHRydWUgfVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBoYW5kbGVQbG90dGluZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wbGF5ZXJPbmUuYm9hcmQucGxvdEZsZWV0KCk7XG4gICAgICB0aGlzLlBsYXllclR3by5ib2FyZC5wbG90RmxlZXQoKTtcbiAgICB9LFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGdhbWUgfTtcbiIsImNvbnN0IHsgc2hpcCB9ID0gcmVxdWlyZShcIi4vc2hpcFwiKTtcblxuY29uc3QgZ2FtZWJvYXJkID0gKCkgPT4ge1xuICBsZXQgZ3JpZEFyciA9IFtdO1xuXG4gIGNvbnN0IGdlbmVyYXRlR3JpZCA9ICgpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICBncmlkQXJyLnB1c2goe1xuICAgICAgICAgIHg6IGksXG4gICAgICAgICAgeTogaixcbiAgICAgICAgICBzaGlwTmFtZTogdW5kZWZpbmVkLFxuICAgICAgICAgIGF0dGFja2VkOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyaWRBcnI7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpc0dhbWVPdmVyOiBmYWxzZSxcbiAgICBncmlkOiBnZW5lcmF0ZUdyaWQoKSxcbiAgICBtaXNzZWRTaG90czogW10sXG4gICAgc3Vua1NoaXBzOiBbXSxcbiAgICBteUZsZWV0OiBbXG4gICAgICBzaGlwKFwiQ2FycmllclwiKSxcbiAgICAgIHNoaXAoXCJCYXR0bGVzaGlwXCIpLFxuICAgICAgc2hpcChcIkRlc3Ryb3llclwiKSxcbiAgICAgIHNoaXAoXCJTdWJtYXJpbmVcIiksXG4gICAgICBzaGlwKFwiUGF0cm9sIEJvYXRcIiksXG4gICAgXSxcbiAgICByZWNlaXZlQXR0YWNrOiBmdW5jdGlvbiAoeENvb3JkLCB5Q29vcmQpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBIaXQgbG9nZ2VkIGF0ICR7eENvb3JkfSwke3lDb29yZH1gKTtcbiAgICAgIHRoaXMuZ3JpZC5mb3JFYWNoKChvYmopID0+IHtcbiAgICAgICAgaWYgKG9iai54ID09IHhDb29yZCAmJiBvYmoueSA9PSB5Q29vcmQpIHtcbiAgICAgICAgICBvYmouYXR0YWNrZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChvYmouc2hpcE5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5taXNzZWRTaG90cy5wdXNoKHsgeDogeENvb3JkLCB5OiB5Q29vcmQgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAob2JqLnNoaXBOYW1lKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJDYXJyaWVyXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5teUZsZWV0WzBdLmhpdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiQmF0dGxlc2hpcFwiOlxuICAgICAgICAgICAgICAgIHRoaXMubXlGbGVldFsxXS5oaXQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIkRlc3Ryb3llclwiOlxuICAgICAgICAgICAgICAgIHRoaXMubXlGbGVldFsyXS5oaXQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIlN1Ym1hcmluZVwiOlxuICAgICAgICAgICAgICAgIHRoaXMubXlGbGVldFszXS5oaXQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIlBhdHJvbCBCb2F0XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5teUZsZWV0WzRdLmhpdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuY2hlY2tTdW5rU2hpcHMoKTtcbiAgICB9LFxuICAgIHBsb3RGbGVldDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGZsZWV0ID0gdGhpcy5teUZsZWV0O1xuICAgICAgZmxlZXQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICBsZXQgcGxvdHMgPSBzaGlwLmxvY2F0aW9uO1xuICAgICAgICBwbG90cy5mb3JFYWNoKChjb29yZCkgPT4ge1xuICAgICAgICAgIHRoaXMuZ3JpZC5mb3JFYWNoKChvYmopID0+IHtcbiAgICAgICAgICAgIGlmIChvYmoueCA9PT0gY29vcmQueCAmJiBvYmoueSA9PT0gY29vcmQueSkge1xuICAgICAgICAgICAgICBvYmouc2hpcE5hbWUgPSBzaGlwLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjaGVja1N1bmtTaGlwczogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGZsZWV0ID0gdGhpcy5teUZsZWV0O1xuICAgICAgZmxlZXQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICBpZiAoc2hpcC5zdW5rID09PSB0cnVlICYmICF0aGlzLnN1bmtTaGlwcy5pbmNsdWRlcyhzaGlwLm5hbWUpKSB7XG4gICAgICAgICAgdGhpcy5zdW5rU2hpcHMucHVzaChTdHJpbmcoc2hpcC5uYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGVja0dhbWVPdmVyKCk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgY2hlY2tHYW1lT3ZlcjogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHRyaWdnZXIgPSB0aGlzLnN1bmtTaGlwcy5sZW5ndGg7XG4gICAgICBpZiAodHJpZ2dlciA9PSA1KSB7XG4gICAgICAgIHRoaXMuaXNHYW1lT3ZlciA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiR2FtZSBPdmVyIFRyaWdnZXJlZFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGdhbWVib2FyZCB9O1xuIiwiY29uc3QgeyBnYW1lYm9hcmQgfSA9IHJlcXVpcmUoXCIuL2dhbWVib2FyZC5qc1wiKTtcblxuY29uc3QgcGxheWVyID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGlzVHVybjogZmFsc2UsXG4gICAgYm9hcmQ6IGdhbWVib2FyZCgpLFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IHBsYXllciB9O1xuIiwiLy8gY29uc3Qge1xuLy8gICByYW5kb21OdW1aZXJvVG9OaW5lLFxuLy8gICByYW5kb21EaXJlY3Rpb24sXG4vLyAgIGRldGVybWluZVNhZmVQYXRoLFxuLy8gfSA9IHJlcXVpcmUoXCIuL2hlbHBlcnMuanNcIik7XG5cbmNvbnN0IHNoaXAgPSAodHlwZSkgPT4ge1xuICBjb25zdCBsZW5ndGggPSAodHlwZSkgPT4ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcIkNhcnJpZXJcIjpcbiAgICAgICAgcmV0dXJuIE51bWJlcig1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQmF0dGxlc2hpcFwiOlxuICAgICAgICByZXR1cm4gTnVtYmVyKDQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJEZXN0cm95ZXJcIjpcbiAgICAgICAgcmV0dXJuIE51bWJlcigzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiU3VibWFyaW5lXCI6XG4gICAgICAgIHJldHVybiBOdW1iZXIoMyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlBhdHJvbCBCb2F0XCI6XG4gICAgICAgIHJldHVybiBOdW1iZXIoMik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzaGlwIHR5cGUgcHJvdmlkZWRcIik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICAvLyBjb25zdCBnZW5lcmF0ZUNvb3JkaW5hdGVzID0gKHBhdGgsIGxlbmd0aCwgc3RhcnQpID0+IHtcbiAgLy8gICBsZXQgbGlzdCA9IFtdO1xuICAvLyAgIGxpc3QucHVzaChzdGFydCk7XG5cbiAgLy8gICBpZiAocGF0aCA9PSBcImxlZnRcIikge1xuICAvLyAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAvLyAgICAgICBsaXN0LnB1c2goeyB4OiBzdGFydC54IC0gaSwgeTogc3RhcnQueSB9KTtcbiAgLy8gICAgIH1cbiAgLy8gICB9IGVsc2UgaWYgKHBhdGggPT0gXCJyaWdodFwiKSB7XG4gIC8vICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gIC8vICAgICAgIGxpc3QucHVzaCh7IHg6IHN0YXJ0LnggKyBpLCB5OiBzdGFydC55IH0pO1xuICAvLyAgICAgfVxuICAvLyAgIH0gZWxzZSBpZiAocGF0aCA9PSBcInVwXCIpIHtcbiAgLy8gICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgLy8gICAgICAgbGlzdC5wdXNoKHsgeDogc3RhcnQueCwgeTogc3RhcnQueSAtIGkgfSk7XG4gIC8vICAgICB9XG4gIC8vICAgfSBlbHNlIGlmIChwYXRoID09IFwiZG93blwiKSB7XG4gIC8vICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gIC8vICAgICAgIGxpc3QucHVzaCh7IHg6IHN0YXJ0LngsIHk6IHN0YXJ0LnkgKyBpIH0pO1xuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4gbGlzdDtcbiAgLy8gfTtcblxuICAvLyBjb25zdCByYW5kb21QbGFjZW1lbnQgPSAoc2hpcExlbmd0aCkgPT4ge1xuICAvLyAgIGxldCBzaGlwQ29vcmRpbmF0ZXMgPSBbXTtcbiAgLy8gICBsZXQgc3RhcnRpbmdQb2ludCA9IHtcbiAgLy8gICAgIHg6IHJhbmRvbU51bVplcm9Ub05pbmUoKSxcbiAgLy8gICAgIHk6IHJhbmRvbU51bVplcm9Ub05pbmUoKSxcbiAgLy8gICB9O1xuXG4gIC8vICAgbGV0IGRpcmVjdGlvbiA9IHJhbmRvbURpcmVjdGlvbigpO1xuXG4gIC8vICAgbGV0IHBhdGggPSBkZXRlcm1pbmVTYWZlUGF0aChkaXJlY3Rpb24sIHN0YXJ0aW5nUG9pbnQpO1xuXG4gIC8vICAgc2hpcENvb3JkaW5hdGVzID0gZ2VuZXJhdGVDb29yZGluYXRlcyhwYXRoLCBzaGlwTGVuZ3RoLCBzdGFydGluZ1BvaW50KTtcblxuICAvLyAgIHJldHVybiBzaGlwQ29vcmRpbmF0ZXM7XG4gIC8vIH07XG5cbiAgZnVuY3Rpb24gcmFuZG9tUGxhY2VtZW50KHNoaXBUeXBlKSB7XG4gICAgc3dpdGNoIChzaGlwVHlwZSkge1xuICAgICAgY2FzZSBcIkNhcnJpZXJcIjpcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAxLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiA0LFxuICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkJhdHRsZXNoaXBcIjpcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB4OiA5LFxuICAgICAgICAgICAgeTogMixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHg6IDksXG4gICAgICAgICAgICB5OiAzLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgeDogOSxcbiAgICAgICAgICAgIHk6IDQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB4OiA5LFxuICAgICAgICAgICAgeTogNSxcbiAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJEZXN0cm95ZXJcIjpcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB4OiA1LFxuICAgICAgICAgICAgeTogNCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHg6IDYsXG4gICAgICAgICAgICB5OiA0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgeDogNyxcbiAgICAgICAgICAgIHk6IDQsXG4gICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiU3VibWFyaW5lXCI6XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgeDogOCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB4OiA4LFxuICAgICAgICAgICAgeTogMSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHg6IDgsXG4gICAgICAgICAgICB5OiAyLFxuICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlBhdHJvbCBCb2F0XCI6XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgeDogNSxcbiAgICAgICAgICAgIHk6IDcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB4OiA2LFxuICAgICAgICAgICAgeTogNyxcbiAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgY29vcmRpbmF0ZXNcIik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogdHlwZSxcbiAgICBsZW5ndGg6IGxlbmd0aCh0eXBlKSxcbiAgICBoaXRzOiAwLFxuICAgIHN1bms6IGZhbHNlLFxuICAgIGxvY2F0aW9uOiByYW5kb21QbGFjZW1lbnQodHlwZSksXG4gICAgaGl0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmhpdHMgKz0gMTtcbiAgICAgIGNvbnNvbGUubG9nKFwiSGl0IGRldGVjdGVkIVwiKTtcbiAgICAgIHRoaXMuaXNTdW5rKCk7XG4gICAgfSxcbiAgICBpc1N1bms6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmhpdHMgPT09IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuc3VuayA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke3RoaXMubmFtZX0gaGFzIGJlZW4gc3Vua2ApO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgc2hpcCB9O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsImNvbnN0IHsgZ2FtZSB9ID0gcmVxdWlyZShcIi4vZ2FtZUxvZ2ljXCIpO1xuXG5jb25zdCBuZXdHYW1lID0gZ2FtZSgpO1xubmV3R2FtZS5pbml0KCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlbmRlclBsYXllckNyZWF0aW9uRWwiLCJib2R5IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGFpbmVyRWwiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwib3ZlcnZpZXdUZXh0IiwiaW5uZXJUZXh0IiwiZm9ybUVsIiwic2V0QXR0cmlidXRlIiwiaW5wdXRFbCIsInJlcXVpcmVkIiwiYnRuRWwiLCJhcHBlbmRDaGlsZCIsImdlbmVyYXRlR2FtZWJvYXJkRWwiLCJwbGF5ZXIiLCJkYXRhQXJyYXkiLCJib2FyZCIsImdyaWQiLCJtYWluQ29udGFpbmVyIiwidGFibGVDb250YWluZXIiLCJ0YWJsZSIsInBsYXllckhlYWRpbmciLCJuYW1lIiwiaSIsInJvdyIsImoiLCJkYXRhSW5kZXgiLCJsZW5ndGgiLCJjZWxsIiwieCIsInkiLCJhdHRhY2tlZCIsInNoaXBOYW1lIiwiaGFuZGxlSGl0c0FuZE1pc3NlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwidGlsZSIsInN0YXR1cyIsImdldEF0dHJpYnV0ZSIsInJlbW92ZSIsImhhbmRsZVBsYXllckdyaWQiLCJnYW1lIiwicGxheWVyT25lTmFtZSIsInVuZGVmaW5lZCIsInBsYXllclR3b05hbWUiLCJwbGF5ZXJPbmUiLCJQbGF5ZXJUd28iLCJpbml0IiwidGhpcyIsImNhY2hlRG9tIiwic3RhcnRFdmVudExpc3RlbmluZyIsImZvcm1Db250YWluZXIiLCJmb3JtU3VibWl0QnRuIiwiZ2V0RWxlbWVudEJ5SWQiLCJmb3JtSW5wdXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwidmFsdWUiLCJoYW5kbGVHYW1lU2V0dXAiLCJoYW5kbGVQbG90dGluZyIsInN0YXJ0QXR0YWNrTGlzdGVuaW5nIiwidGFyZ2V0IiwicmVjZWl2ZUF0dGFjayIsIm9uY2UiLCJwbG90RmxlZXQiLCJzaGlwIiwiZ2FtZWJvYXJkIiwiZ3JpZEFyciIsImlzR2FtZU92ZXIiLCJwdXNoIiwiZ2VuZXJhdGVHcmlkIiwibWlzc2VkU2hvdHMiLCJzdW5rU2hpcHMiLCJteUZsZWV0IiwieENvb3JkIiwieUNvb3JkIiwiY29uc29sZSIsImxvZyIsIm9iaiIsImhpdCIsImNoZWNrU3Vua1NoaXBzIiwibG9jYXRpb24iLCJjb29yZCIsInN1bmsiLCJpbmNsdWRlcyIsIlN0cmluZyIsImNoZWNrR2FtZU92ZXIiLCJpc1R1cm4iLCJ0eXBlIiwiTnVtYmVyIiwiRXJyb3IiLCJoaXRzIiwic2hpcFR5cGUiLCJyYW5kb21QbGFjZW1lbnQiLCJpc1N1bmsiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==