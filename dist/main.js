(()=>{var e={817:e=>{e.exports={renderPlayerCreationEl:function(){const e=document.querySelector("body");let t=document.createElement("div");t.classList.add("player-creation-container");let r=document.createElement("p");r.innerText="You are about to enter unfamiliar waters in an effort to neutralize enemy ships. Due to thick fog our strategy is simple, fire artillery and observe any contact. Intel suggests the enemy fleet contains 5 ships of varying sizes...\n  \n  Instructions:\n  \n  Using arial reconnaissance order fire on mapped coordinates. Hits will be recorded with an explosion marker, while misses will be indicated with a water marker.";let a=document.createElement("form");a.setAttribute("name","player-creation-form"),a.setAttribute("class","player-creation-form");let i=document.createElement("input");i.setAttribute("id","playerName"),i.setAttribute("type","text"),i.setAttribute("min","1"),i.required=!0,i.setAttribute("max","25"),i.setAttribute("placeholder","Enter Player Name");let n=document.createElement("button");n.setAttribute("id","playerSubmit"),n.setAttribute("type","submit"),n.setAttribute("for","player-creation-form"),n.innerText="Launch Fleet",e.appendChild(t),t.appendChild(a),a.appendChild(r),a.appendChild(i),a.appendChild(n)},generateGameboardEl:function(e){const t=[...e.board.grid],r=document.querySelector(".main-content-container"),a=document.createElement("div"),i=document.createElement("table");i.setAttribute("class","gameboard-table");const n=document.createElement("th");n.innerText=`${e.name}'s Fleet`,a.appendChild(n);for(let r=0;r<10;r++){const a=document.createElement("tr");a.setAttribute("class","gameboard-row");for(let i=0;i<10;i++){const n=10*r+i;if(n<t.length){const r=document.createElement("td");a.appendChild(r),r.setAttribute("data-x",`${t[n].x}`),r.setAttribute("data-y",`${t[n].y}`),r.setAttribute("data-attacked",`${t[n].attacked}`),r.setAttribute("data-ship",`${t[n].shipName}`),r.setAttribute("class","gameboard-tile"),"Computer"===e.name&&r.classList.add("enemy-tile")}}i.appendChild(a)}a.appendChild(i),r.appendChild(a)},updateDisplay:function(){document.querySelectorAll(".gameboard-tile").forEach((e=>{let t=e.getAttribute("data-attacked"),r=e.getAttribute("data-ship");"true"===t&&"undefined"===r&&(e.classList.remove("enemy-tile"),e.classList.add("missed")),"true"===t&&"undefined"!==r&&(e.classList.remove("enemy-tile"),e.classList.add("hit"))}))}}},404:(e,t,r)=>{const{renderPlayerCreationEl:a,generateGameboardEl:i,updateDisplay:n}=r(817),{player:s}=r(507);e.exports={game:()=>({playerOneName:void 0,playerTwoName:"Computer",playerOne:void 0,PlayerTwo:void 0,init:function(){a(),this.cacheDom(),this.startEventListening()},cacheDom:function(){this.formContainer=document.querySelector(".player-creation-container"),this.formSubmitBtn=document.getElementById("playerSubmit"),this.formInput=document.getElementById("playerName")},startEventListening:function(){this.formSubmitBtn.addEventListener("click",(e=>{e.preventDefault(),this.playerOneName=this.formInput.value,this.formContainer.classList.add("hidden"),this.handleGameSetup()}))},handleGameSetup:function(){this.playerOne=s(this.playerOneName),this.PlayerTwo=s(this.playerTwoName),this.handlePlotting(),i(this.playerOne),i(this.PlayerTwo),this.startAttackListening()},startAttackListening:function(){document.querySelectorAll(".enemy-tile").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),e.target.setAttribute("data-attacked","true");let t=e.target.getAttribute("data-x"),r=e.target.getAttribute("data-y");this.PlayerTwo.board.receiveAttack(t,r),n()}))}))},handlePlotting:function(){this.playerOne.board.plotFleet(),this.PlayerTwo.board.plotFleet()}})}},498:(e,t,r)=>{const{ship:a}=r(643);e.exports={gameboard:()=>{let e=[];return{isGameOver:!1,grid:(()=>{for(let t=0;t<10;t++)for(let r=0;r<10;r++)e.push({x:t,y:r,shipName:void 0,attacked:!1});return e})(),missedShots:[],sunkShips:[],myFleet:[a("Carrier"),a("Battleship"),a("Destroyer"),a("Submarine"),a("Patrol Boat")],receiveAttack:function(e,t){console.log(`Hit logged at ${e},${t}`),this.grid.forEach((r=>{if(r.x==e&&r.y==t)if(r.attacked=!0,void 0===r.shipName)this.missedShots.push({x:e,y:t});else switch(r.shipName){case"Carrier":this.myFleet[0].hit();break;case"Battleship":this.myFleet[1].hit();break;case"Destroyer":this.myFleet[2].hit();break;case"Submarine":this.myFleet[3].hit();break;case"Patrol Boat":this.myFleet[4].hit()}}))},plotFleet:function(){this.myFleet.forEach((e=>{e.location.forEach((t=>{this.grid.forEach((r=>{r.x===t.x&&r.y===t.y&&(r.shipName=e.name)}))}))}))},checkSunkShips:function(){this.myFleet.forEach((e=>{!0===e.sunk&&this.sunkShips.push(String(e.name))}))},checkGameOver:function(){5===this.sunkShips.length&&(this.isGameOver=!0)}}}}},225:e=>{const t=()=>Math.floor(10*Math.random());e.exports={randomNumZeroToNine:t,randomDirection:()=>{let e;return e=t()<=4?"horizontal":"vertical",e},determineSafePath:(e,t)=>{let r;return"horizontal"===e?r=t.x<=4?"right":"left":"vertical"===e&&(r=t.y<=4?"down":"up"),r}}},507:(e,t,r)=>{const{gameboard:a}=r(498);e.exports={player:e=>({name:e,isTurn:!1,board:a()})}},643:(e,t,r)=>{const{randomNumZeroToNine:a,randomDirection:i,determineSafePath:n}=r(225);e.exports={ship:e=>{const t=e=>{switch(e){case"Carrier":return Number(5);case"Battleship":return Number(4);case"Destroyer":case"Submarine":return Number(3);case"Patrol Boat":return Number(2);default:throw new Error("Invalid ship type provided")}};return{name:e,length:t(e),hits:0,sunk:!1,location:(e=>{let t=[],r={x:a(),y:a()},s=i();return t=((e,t,r)=>{let a=[];if(a.push(r),"left"==e)for(let e=1;e<t;e++)a.push({x:r.x-e,y:r.y});else if("right"==e)for(let e=1;e<t;e++)a.push({x:r.x+e,y:r.y});else if("up"==e)for(let e=1;e<t;e++)a.push({x:r.x,y:r.y-e});else if("down"==e)for(let e=1;e<t;e++)a.push({x:r.x,y:r.y+e});return a})(n(s,r),e,r),t})(t(e)),hit:function(){this.hits+=1,console.log("Hit detected!"),this.isSunk()},isSunk:function(){this.hits===this.length&&(this.sunk=!0,console.log(`${this.name} has been sunk`))}}}}}},t={};function r(a){var i=t[a];if(void 0!==i)return i.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,r),n.exports}(()=>{const{game:e}=r(404);e().init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,