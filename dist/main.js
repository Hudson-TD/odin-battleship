(()=>{var e={817:e=>{e.exports={renderPlayerCreationEl:function(){const e=document.querySelector("body");let t=document.createElement("div");t.classList.add("player-creation-container");let r=document.createElement("p");r.innerText="You are about to enter unfamiliar waters in an effort to neutralize enemy ships. Due to thick fog our strategy is simple, fire artillery and observe any contact. Intel suggests the enemy fleet contains 5 ships of varying sizes...\n  \n  Instructions:\n  \n  Using arial reconnaissance order fire on mapped coordinates. Hits will be recorded with an explosion marker, while misses will be indicated with a water marker.";let i=document.createElement("form");i.setAttribute("name","player-creation-form"),i.setAttribute("class","player-creation-form");let a=document.createElement("input");a.setAttribute("id","playerName"),a.setAttribute("type","text"),a.setAttribute("min","1"),a.required=!0,a.setAttribute("max","25"),a.setAttribute("placeholder","Enter Player Name");let n=document.createElement("button");n.setAttribute("id","playerSubmit"),n.setAttribute("type","submit"),n.setAttribute("for","player-creation-form"),n.innerText="Launch Fleet",e.appendChild(t),t.appendChild(i),i.appendChild(r),i.appendChild(a),i.appendChild(n)},generateGameboardEl:function(e){const t=[...e.board.grid],r=document.querySelector(".main-content-container"),i=document.createElement("div"),a=document.createElement("table");a.setAttribute("class","gameboard-table");const n=document.createElement("th");n.innerText=`${e.name}'s Fleet`,i.appendChild(n);for(let e=0;e<10;e++){const r=document.createElement("tr");r.setAttribute("class","gameboard-row");for(let i=0;i<10;i++){const a=10*e+i;if(a<t.length){const e=document.createElement("td");r.appendChild(e),e.setAttribute("data-x",`${t[a].x}`),e.setAttribute("data-y",`${t[a].y}`),e.setAttribute("class","gameboard-tile")}}a.appendChild(r)}i.appendChild(a),r.appendChild(i)}}},498:(e,t,r)=>{const{ship:i}=r(643);e.exports={gameboard:()=>{let e=[];return{isGameOver:!1,grid:(()=>{for(let t=0;t<10;t++)for(let r=0;r<10;r++)e.push({x:t,y:r,shipName:void 0,attacked:!1});return e})(),missedShots:[],sunkShips:[],myFleet:[i("Carrier"),i("Battleship"),i("Destroyer"),i("Submarine"),i("Patrol Boat")],receiveAttack(e,t){this.grid.forEach((r=>{if(r.x===e&&r.y===t)if(r.attacked=!0,void 0===r.shipName)this.missedShots.push({x:e,y:t});else switch(r.shipName){case"Carrier":this.myFleet[0].hit();break;case"Battleship":this.myFleet[1].hit();break;case"Destroyer":this.myFleet[2].hit();break;case"Submarine":this.myFleet[3].hit();break;case"Patrol Boat":this.myFleet[4].hit()}}))},plotFleet(){this.myFleet.forEach((e=>{e.location.forEach((t=>{this.grid.forEach((r=>{r.x===t.x&&r.y===t.y&&(r.shipName=e.name)}))}))}))},checkSunkShips(){this.myFleet.forEach((e=>{!0===e.sunk&&this.sunkShips.push(String(e.name))}))},checkGameOver(){5===this.sunkShips.length&&(this.isGameOver=!0)}}}}},225:e=>{const t=()=>Math.floor(10*Math.random());e.exports={randomNumZeroToNine:t,randomDirection:()=>{let e;return e=t()<=4?"horizontal":"vertical",e},determineSafePath:(e,t)=>{let r;return"horizontal"===e?r=t.x<=4?"right":"left":"vertical"===e&&(r=t.y<=4?"down":"up"),r}}},507:(e,t,r)=>{const{gameboard:i}=r(498);e.exports={player:e=>({name:e,isTurn:!1,board:i()})}},643:(e,t,r)=>{const{randomNumZeroToNine:i,randomDirection:a,determineSafePath:n}=r(225);e.exports={ship:e=>{const t=e=>{switch(e){case"Carrier":return Number(5);case"Battleship":return Number(4);case"Destroyer":case"Submarine":return Number(3);case"Patrol Boat":return Number(2);default:throw new Error("Invalid ship type provided")}};return{name:e,length:t(e),hits:0,sunk:!1,location:(e=>{let t=[],r={x:i(),y:i()},s=a();return t=((e,t,r)=>{let i=[];if(i.push(r),"left"==e)for(let e=1;e<t;e++)i.push({x:r.x-e,y:r.y});else if("right"==e)for(let e=1;e<t;e++)i.push({x:r.x+e,y:r.y});else if("up"==e)for(let e=1;e<t;e++)i.push({x:r.x,y:r.y-e});else if("down"==e)for(let e=1;e<t;e++)i.push({x:r.x,y:r.y+e});return i})(n(s,r),e,r),t})(t(e)),hit(){this.hits+=1,this.isSunk()},isSunk(){this.hits===this.length&&(this.sunk=!0)}}}}}},t={};function r(i){var a=t[i];if(void 0!==a)return a.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,r),n.exports}(()=>{const{renderPlayerCreationEl:e,generateGameboardEl:t}=r(817),{player:i}=r(507);({playerOneName:void 0,playerTwoName:"Computer",playerOne:void 0,PlayerTwo:void 0,init:function(){e(),this.cacheDom(),this.startEventListening()},cacheDom:function(){this.formContainer=document.querySelector(".player-creation-container"),this.formSubmitBtn=document.getElementById("playerSubmit"),this.formInput=document.getElementById("playerName")},startEventListening:function(){this.formSubmitBtn.addEventListener("click",(e=>{e.preventDefault(),this.playerOneName=this.formInput.value,this.formContainer.classList.add("hidden"),this.handleGameSetup()}))},handleGameSetup:function(){this.playerOne=i(this.playerOneName),this.PlayerTwo=i(this.playerTwoName),t(this.playerOne),t(this.PlayerTwo)}}).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoicUJBcUVBQSxFQUFPQyxRQUFVLENBQUVDLHVCQXJFbkIsV0FDRSxNQUFNQyxFQUFPQyxTQUFTQyxjQUFjLFFBQ3BDLElBQUlDLEVBQWNGLFNBQVNHLGNBQWMsT0FDekNELEVBQVlFLFVBQVVDLElBQUksNkJBRTFCLElBQUlDLEVBQWVOLFNBQVNHLGNBQWMsS0FFMUNHLEVBQWFDLFVBQVkscWFBTXpCLElBQUlDLEVBQVNSLFNBQVNHLGNBQWMsUUFDcENLLEVBQU9DLGFBQWEsT0FBUSx3QkFDNUJELEVBQU9DLGFBQWEsUUFBUyx3QkFFN0IsSUFBSUMsRUFBVVYsU0FBU0csY0FBYyxTQUNyQ08sRUFBUUQsYUFBYSxLQUFNLGNBQzNCQyxFQUFRRCxhQUFhLE9BQVEsUUFDN0JDLEVBQVFELGFBQWEsTUFBTyxLQUM1QkMsRUFBUUMsVUFBVyxFQUNuQkQsRUFBUUQsYUFBYSxNQUFPLE1BQzVCQyxFQUFRRCxhQUFhLGNBQWUscUJBRXBDLElBQUlHLEVBQVFaLFNBQVNHLGNBQWMsVUFDbkNTLEVBQU1ILGFBQWEsS0FBTSxnQkFDekJHLEVBQU1ILGFBQWEsT0FBUSxVQUMzQkcsRUFBTUgsYUFBYSxNQUFPLHdCQUMxQkcsRUFBTUwsVUFBWSxlQUVsQlIsRUFBS2MsWUFBWVgsR0FDakJBLEVBQVlXLFlBQVlMLEdBQ3hCQSxFQUFPSyxZQUFZUCxHQUNuQkUsRUFBT0ssWUFBWUgsR0FDbkJGLEVBQU9LLFlBQVlELEVBQ3JCLEVBaUMyQ0Usb0JBL0IzQyxTQUE2QkMsR0FDM0IsTUFBTUMsRUFBWSxJQUFJRCxFQUFPRSxNQUFNQyxNQUM3QkMsRUFBZ0JuQixTQUFTQyxjQUFjLDJCQUN2Q21CLEVBQWlCcEIsU0FBU0csY0FBYyxPQUN4Q2tCLEVBQVFyQixTQUFTRyxjQUFjLFNBQ3JDa0IsRUFBTVosYUFBYSxRQUFTLG1CQUM1QixNQUFNYSxFQUFnQnRCLFNBQVNHLGNBQWMsTUFDN0NtQixFQUFjZixVQUFZLEdBQUdRLEVBQU9RLGVBQ3BDSCxFQUFlUCxZQUFZUyxHQUUzQixJQUFLLElBQUlFLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUFLLENBQzNCLE1BQU1DLEVBQU16QixTQUFTRyxjQUFjLE1BQ25Dc0IsRUFBSWhCLGFBQWEsUUFBUyxpQkFFMUIsSUFBSyxJQUFJaUIsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQUssQ0FDM0IsTUFBTUMsRUFBZ0IsR0FBSkgsRUFBU0UsRUFFM0IsR0FBSUMsRUFBWVgsRUFBVVksT0FBUSxDQUNoQyxNQUFNQyxFQUFPN0IsU0FBU0csY0FBYyxNQUNwQ3NCLEVBQUlaLFlBQVlnQixHQUNoQkEsRUFBS3BCLGFBQWEsU0FBVSxHQUFHTyxFQUFVVyxHQUFXRyxLQUNwREQsRUFBS3BCLGFBQWEsU0FBVSxHQUFHTyxFQUFVVyxHQUFXSSxLQUNwREYsRUFBS3BCLGFBQWEsUUFBUyxpQkFDN0IsQ0FDRixDQUNBWSxFQUFNUixZQUFZWSxFQUNwQixDQUNBTCxFQUFlUCxZQUFZUSxHQUMzQkYsRUFBY04sWUFBWU8sRUFDNUIsRSxnQkNuRUEsTUFBTSxLQUFFWSxHQUFTLEVBQVEsS0E2RnpCcEMsRUFBT0MsUUFBVSxDQUFFb0MsVUEzRkQsS0FDaEIsSUFBSUMsRUFBVSxHQWlCZCxNQUFPLENBQ0xDLFlBQVksRUFDWmpCLEtBakJtQixNQUNuQixJQUFLLElBQUlNLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUN0QixJQUFLLElBQUlFLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUN0QlEsRUFBUUUsS0FBSyxDQUNYTixFQUFHTixFQUNITyxFQUFHTCxFQUNIVyxjQUFVQyxFQUNWQyxVQUFVLElBS2hCLE9BQU9MLENBQU8sRUFLUk0sR0FDTkMsWUFBYSxHQUNiQyxVQUFXLEdBQ1hDLFFBQVMsQ0FDUFgsRUFBSyxXQUNMQSxFQUFLLGNBQ0xBLEVBQUssYUFDTEEsRUFBSyxhQUNMQSxFQUFLLGdCQUVQLGFBQUFZLENBQWNDLEVBQVFDLEdBQ3BCQyxLQUFLN0IsS0FBSzhCLFNBQVNDLElBQ2pCLEdBQUlBLEVBQUluQixJQUFNZSxHQUFVSSxFQUFJbEIsSUFBTWUsRUFFaEMsR0FEQUcsRUFBSVYsVUFBVyxPQUNNRCxJQUFqQlcsRUFBSVosU0FDTlUsS0FBS04sWUFBWUwsS0FBSyxDQUFFTixFQUFHZSxFQUFRZCxFQUFHZSxTQUV0QyxPQUFRRyxFQUFJWixVQUNWLElBQUssVUFDSFUsS0FBS0osUUFBUSxHQUFHTyxNQUNoQixNQUNGLElBQUssYUFDSEgsS0FBS0osUUFBUSxHQUFHTyxNQUNoQixNQUNGLElBQUssWUFDSEgsS0FBS0osUUFBUSxHQUFHTyxNQUNoQixNQUNGLElBQUssWUFDSEgsS0FBS0osUUFBUSxHQUFHTyxNQUNoQixNQUNGLElBQUssY0FDSEgsS0FBS0osUUFBUSxHQUFHTyxNQU94QixHQUVKLEVBQ0EsU0FBQUMsR0FDY0osS0FBS0osUUFDWEssU0FBU2hCLElBQ0RBLEVBQUtvQixTQUNYSixTQUFTSyxJQUNiTixLQUFLN0IsS0FBSzhCLFNBQVNDLElBQ2JBLEVBQUluQixJQUFNdUIsRUFBTXZCLEdBQUttQixFQUFJbEIsSUFBTXNCLEVBQU10QixJQUN2Q2tCLEVBQUlaLFNBQVdMLEVBQUtULEtBQ3RCLEdBQ0EsR0FDRixHQUVOLEVBQ0EsY0FBQStCLEdBQ2NQLEtBQUtKLFFBQ1hLLFNBQVNoQixLQUNLLElBQWRBLEVBQUt1QixNQUNQUixLQUFLTCxVQUFVTixLQUFLb0IsT0FBT3hCLEVBQUtULE1BQ2xDLEdBRUosRUFFQSxhQUFBa0MsR0FDZ0MsSUFBMUJWLEtBQUtMLFVBQVVkLFNBQ2pCbUIsS0FBS1osWUFBYSxFQUV0QixFQUNELEUsVUMxRkgsTUFBTXVCLEVBQXNCLElBQ25CQyxLQUFLQyxNQUFzQixHQUFoQkQsS0FBS0UsVUFtQ3pCakUsRUFBT0MsUUFBVSxDQUFFNkQsc0JBQXFCSSxnQkFoQ2hCLEtBQ3RCLElBQUlDLEVBU0osT0FMRUEsRUFIYUwsS0FFQyxFQUNGLGFBRUEsV0FHUEssQ0FBUyxFQXNCdUNDLGtCQW5CL0IsQ0FBQ0QsRUFBV0UsS0FDcEMsSUFBSUMsRUFlSixNQWJrQixlQUFkSCxFQUVBRyxFQURFRCxFQUFNbkMsR0FBSyxFQUNOLFFBRUEsT0FFYyxhQUFkaUMsSUFFUEcsRUFERUQsRUFBTWxDLEdBQUssRUFDTixPQUVBLE1BR0ptQyxDQUFJLEUsZ0JDakNiLE1BQU0sVUFBRWpDLEdBQWMsRUFBUSxLQVU5QnJDLEVBQU9DLFFBQVUsQ0FBRWtCLE9BUkhRLElBQ1AsQ0FDTEEsS0FBTUEsRUFDTjRDLFFBQVEsRUFDUmxELE1BQU9nQixNLGdCQ05YLE1BQU0sb0JBQ0p5QixFQUFtQixnQkFDbkJJLEVBQWUsa0JBQ2ZFLEdBQ0UsRUFBUSxLQW9GWnBFLEVBQU9DLFFBQVUsQ0FBRW1DLEtBbEZMb0MsSUFDWixNQUFNeEMsRUFBVXdDLElBQ2QsT0FBUUEsR0FDTixJQUFLLFVBQ0gsT0FBT0MsT0FBTyxHQUVoQixJQUFLLGFBQ0gsT0FBT0EsT0FBTyxHQUVoQixJQUFLLFlBR0wsSUFBSyxZQUNILE9BQU9BLE9BQU8sR0FFaEIsSUFBSyxjQUNILE9BQU9BLE9BQU8sR0FFaEIsUUFDRSxNQUFNLElBQUlDLE1BQU0sOEJBRXBCLEVBMkNGLE1BQU8sQ0FDTC9DLEtBQU02QyxFQUNOeEMsT0FBUUEsRUFBT3dDLEdBQ2ZHLEtBQU0sRUFDTmhCLE1BQU0sRUFDTkgsU0FyQnNCLENBQUNvQixJQUN2QixJQUFJQyxFQUFrQixHQUNsQkMsRUFBZ0IsQ0FDbEI1QyxFQUFHNEIsSUFDSDNCLEVBQUcyQixLQUdESyxFQUFZRCxJQU1oQixPQUZBVyxFQW5DMEIsRUFBQ1AsRUFBTXRDLEVBQVFxQyxLQUN6QyxJQUFJVSxFQUFPLEdBR1gsR0FGQUEsRUFBS3ZDLEtBQUs2QixHQUVFLFFBQVJDLEVBQ0YsSUFBSyxJQUFJMUMsRUFBSSxFQUFHQSxFQUFJSSxFQUFRSixJQUMxQm1ELEVBQUt2QyxLQUFLLENBQUVOLEVBQUdtQyxFQUFNbkMsRUFBSU4sRUFBR08sRUFBR2tDLEVBQU1sQyxTQUVsQyxHQUFZLFNBQVJtQyxFQUNULElBQUssSUFBSTFDLEVBQUksRUFBR0EsRUFBSUksRUFBUUosSUFDMUJtRCxFQUFLdkMsS0FBSyxDQUFFTixFQUFHbUMsRUFBTW5DLEVBQUlOLEVBQUdPLEVBQUdrQyxFQUFNbEMsU0FFbEMsR0FBWSxNQUFSbUMsRUFDVCxJQUFLLElBQUkxQyxFQUFJLEVBQUdBLEVBQUlJLEVBQVFKLElBQzFCbUQsRUFBS3ZDLEtBQUssQ0FBRU4sRUFBR21DLEVBQU1uQyxFQUFHQyxFQUFHa0MsRUFBTWxDLEVBQUlQLFNBRWxDLEdBQVksUUFBUjBDLEVBQ1QsSUFBSyxJQUFJMUMsRUFBSSxFQUFHQSxFQUFJSSxFQUFRSixJQUMxQm1ELEVBQUt2QyxLQUFLLENBQUVOLEVBQUdtQyxFQUFNbkMsRUFBR0MsRUFBR2tDLEVBQU1sQyxFQUFJUCxJQUd6QyxPQUFPbUQsQ0FBSSxFQWNPQyxDQUZQWixFQUFrQkQsRUFBV1csR0FFSUYsRUFBWUUsR0FFakRELENBQWUsRUFRWkksQ0FBZ0JqRCxFQUFPd0MsSUFDakMsR0FBQWxCLEdBQ0VILEtBQUt3QixNQUFRLEVBQ2J4QixLQUFLK0IsUUFDUCxFQUNBLE1BQUFBLEdBQ00vQixLQUFLd0IsT0FBU3hCLEtBQUtuQixTQUNyQm1CLEtBQUtRLE1BQU8sRUFFaEIsRUFDRCxFLEdDcEZDd0IsRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCM0MsSUFBakI0QyxFQUNILE9BQU9BLEVBQWFyRixRQUdyQixJQUFJRCxFQUFTbUYsRUFBeUJFLEdBQVksQ0FHakRwRixRQUFTLENBQUMsR0FPWCxPQUhBc0YsRUFBb0JGLEdBQVVyRixFQUFRQSxFQUFPQyxRQUFTbUYsR0FHL0NwRixFQUFPQyxPQUNmLEMsTUN0QkEsTUFBTSx1QkFDSkMsRUFBc0Isb0JBQ3RCZ0IsR0FDRSxFQUFRLE1BQ04sT0FBRUMsR0FBVyxFQUFRLE1BR2xCLENBQ0xxRSxtQkFBZTlDLEVBQ2YrQyxjQUFlLFdBQ2ZDLGVBQVdoRCxFQUNYaUQsZUFBV2pELEVBQ1hrRCxLQUFNLFdBQ0oxRixJQUNBaUQsS0FBSzBDLFdBQ0wxQyxLQUFLMkMscUJBQ1AsRUFDQUQsU0FBVSxXQUNSMUMsS0FBSzRDLGNBQWdCM0YsU0FBU0MsY0FBYyw4QkFDNUM4QyxLQUFLNkMsY0FBZ0I1RixTQUFTNkYsZUFBZSxnQkFDN0M5QyxLQUFLK0MsVUFBWTlGLFNBQVM2RixlQUFlLGFBQzNDLEVBQ0FILG9CQUFxQixXQUNuQjNDLEtBQUs2QyxjQUFjRyxpQkFBaUIsU0FBVUMsSUFDNUNBLEVBQUVDLGlCQUNGbEQsS0FBS3FDLGNBQWdCckMsS0FBSytDLFVBQVVJLE1BQ3BDbkQsS0FBSzRDLGNBQWN2RixVQUFVQyxJQUFJLFVBQ2pDMEMsS0FBS29ELGlCQUFpQixHQUUxQixFQUNBQSxnQkFBaUIsV0FDZnBELEtBQUt1QyxVQUFZdkUsRUFBT2dDLEtBQUtxQyxlQUM3QnJDLEtBQUt3QyxVQUFZeEUsRUFBT2dDLEtBQUtzQyxlQUM3QnZFLEVBQW9CaUMsS0FBS3VDLFdBQ3pCeEUsRUFBb0JpQyxLQUFLd0MsVUFDM0IsSUFLSUMsTSIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9kb21Db250cm9sbGVyLmpzIiwid2VicGFjazovL29kaW4tYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL3BsYXllci5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvLi9zcmMvc2hpcC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlbmRlclBsYXllckNyZWF0aW9uRWwoKSB7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcbiAgbGV0IGNvbnRhaW5lckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29udGFpbmVyRWwuY2xhc3NMaXN0LmFkZChcInBsYXllci1jcmVhdGlvbi1jb250YWluZXJcIik7XG5cbiAgbGV0IG92ZXJ2aWV3VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuXG4gIG92ZXJ2aWV3VGV4dC5pbm5lclRleHQgPSBgWW91IGFyZSBhYm91dCB0byBlbnRlciB1bmZhbWlsaWFyIHdhdGVycyBpbiBhbiBlZmZvcnQgdG8gbmV1dHJhbGl6ZSBlbmVteSBzaGlwcy4gRHVlIHRvIHRoaWNrIGZvZyBvdXIgc3RyYXRlZ3kgaXMgc2ltcGxlLCBmaXJlIGFydGlsbGVyeSBhbmQgb2JzZXJ2ZSBhbnkgY29udGFjdC4gSW50ZWwgc3VnZ2VzdHMgdGhlIGVuZW15IGZsZWV0IGNvbnRhaW5zIDUgc2hpcHMgb2YgdmFyeWluZyBzaXplcy4uLlxuICBcbiAgSW5zdHJ1Y3Rpb25zOlxuICBcbiAgVXNpbmcgYXJpYWwgcmVjb25uYWlzc2FuY2Ugb3JkZXIgZmlyZSBvbiBtYXBwZWQgY29vcmRpbmF0ZXMuIEhpdHMgd2lsbCBiZSByZWNvcmRlZCB3aXRoIGFuIGV4cGxvc2lvbiBtYXJrZXIsIHdoaWxlIG1pc3NlcyB3aWxsIGJlIGluZGljYXRlZCB3aXRoIGEgd2F0ZXIgbWFya2VyLmA7XG5cbiAgbGV0IGZvcm1FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICBmb3JtRWwuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInBsYXllci1jcmVhdGlvbi1mb3JtXCIpO1xuICBmb3JtRWwuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJwbGF5ZXItY3JlYXRpb24tZm9ybVwiKTtcblxuICBsZXQgaW5wdXRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgaW5wdXRFbC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInBsYXllck5hbWVcIik7XG4gIGlucHV0RWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gIGlucHV0RWwuc2V0QXR0cmlidXRlKFwibWluXCIsIFwiMVwiKTtcbiAgaW5wdXRFbC5yZXF1aXJlZCA9IHRydWU7XG4gIGlucHV0RWwuc2V0QXR0cmlidXRlKFwibWF4XCIsIFwiMjVcIik7XG4gIGlucHV0RWwuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgXCJFbnRlciBQbGF5ZXIgTmFtZVwiKTtcblxuICBsZXQgYnRuRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBidG5FbC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInBsYXllclN1Ym1pdFwiKTtcbiAgYnRuRWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInN1Ym1pdFwiKTtcbiAgYnRuRWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwicGxheWVyLWNyZWF0aW9uLWZvcm1cIik7XG4gIGJ0bkVsLmlubmVyVGV4dCA9IFwiTGF1bmNoIEZsZWV0XCI7XG5cbiAgYm9keS5hcHBlbmRDaGlsZChjb250YWluZXJFbCk7XG4gIGNvbnRhaW5lckVsLmFwcGVuZENoaWxkKGZvcm1FbCk7XG4gIGZvcm1FbC5hcHBlbmRDaGlsZChvdmVydmlld1RleHQpO1xuICBmb3JtRWwuYXBwZW5kQ2hpbGQoaW5wdXRFbCk7XG4gIGZvcm1FbC5hcHBlbmRDaGlsZChidG5FbCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlR2FtZWJvYXJkRWwocGxheWVyKSB7XG4gIGNvbnN0IGRhdGFBcnJheSA9IFsuLi5wbGF5ZXIuYm9hcmQuZ3JpZF07XG4gIGNvbnN0IG1haW5Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW4tY29udGVudC1jb250YWluZXJcIik7XG4gIGNvbnN0IHRhYmxlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XG4gIHRhYmxlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ2FtZWJvYXJkLXRhYmxlXCIpO1xuICBjb25zdCBwbGF5ZXJIZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xuICBwbGF5ZXJIZWFkaW5nLmlubmVyVGV4dCA9IGAke3BsYXllci5uYW1lfSdzIEZsZWV0YDtcbiAgdGFibGVDb250YWluZXIuYXBwZW5kQ2hpbGQocGxheWVySGVhZGluZyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgIHJvdy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImdhbWVib2FyZC1yb3dcIik7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgIGNvbnN0IGRhdGFJbmRleCA9IGkgKiAxMCArIGo7XG5cbiAgICAgIGlmIChkYXRhSW5kZXggPCBkYXRhQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXhcIiwgYCR7ZGF0YUFycmF5W2RhdGFJbmRleF0ueH1gKTtcbiAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXlcIiwgYCR7ZGF0YUFycmF5W2RhdGFJbmRleF0ueX1gKTtcbiAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImdhbWVib2FyZC10aWxlXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0YWJsZS5hcHBlbmRDaGlsZChyb3cpO1xuICB9XG4gIHRhYmxlQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAgbWFpbkNvbnRhaW5lci5hcHBlbmRDaGlsZCh0YWJsZUNvbnRhaW5lcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXJQbGF5ZXJDcmVhdGlvbkVsLCBnZW5lcmF0ZUdhbWVib2FyZEVsIH07XG5cbi8vICAgbGV0IGdyaWRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XG4vLyBncmlkQ29udGFpbmVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ2FtZWJvYXJkLWNvbnRhaW5lclwiKTtcbi8vIGJvZHkuYXBwZW5kQ2hpbGQoZ3JpZENvbnRhaW5lcik7XG4vLyBwbGF5ZXIuYm9hcmQuZ3JpZC5mb3JFYWNoKChvYmopID0+IHtcbi8vICAgbGV0IHRpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuLy8gICB0aWxlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ2FtZWJvYXJkLWdyaWQtaXRlbVwiKTtcbi8vICAgdGlsZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXhcIiwgYCR7b2JqLnh9YCk7XG4vLyAgIHRpbGUuc2V0QXR0cmlidXRlKFwiZGF0YS15XCIsIGAke29iai55fWApO1xuLy8gICBncmlkQ29udGFpbmVyLmFwcGVuZENoaWxkKHRpbGUpO1xuIiwiY29uc3QgeyBzaGlwIH0gPSByZXF1aXJlKFwiLi9zaGlwXCIpO1xuXG5jb25zdCBnYW1lYm9hcmQgPSAoKSA9PiB7XG4gIGxldCBncmlkQXJyID0gW107XG5cbiAgY29uc3QgZ2VuZXJhdGVHcmlkID0gKCkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaisrKSB7XG4gICAgICAgIGdyaWRBcnIucHVzaCh7XG4gICAgICAgICAgeDogaSxcbiAgICAgICAgICB5OiBqLFxuICAgICAgICAgIHNoaXBOYW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgYXR0YWNrZWQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ3JpZEFycjtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGlzR2FtZU92ZXI6IGZhbHNlLFxuICAgIGdyaWQ6IGdlbmVyYXRlR3JpZCgpLFxuICAgIG1pc3NlZFNob3RzOiBbXSxcbiAgICBzdW5rU2hpcHM6IFtdLFxuICAgIG15RmxlZXQ6IFtcbiAgICAgIHNoaXAoXCJDYXJyaWVyXCIpLFxuICAgICAgc2hpcChcIkJhdHRsZXNoaXBcIiksXG4gICAgICBzaGlwKFwiRGVzdHJveWVyXCIpLFxuICAgICAgc2hpcChcIlN1Ym1hcmluZVwiKSxcbiAgICAgIHNoaXAoXCJQYXRyb2wgQm9hdFwiKSxcbiAgICBdLFxuICAgIHJlY2VpdmVBdHRhY2soeENvb3JkLCB5Q29vcmQpIHtcbiAgICAgIHRoaXMuZ3JpZC5mb3JFYWNoKChvYmopID0+IHtcbiAgICAgICAgaWYgKG9iai54ID09PSB4Q29vcmQgJiYgb2JqLnkgPT09IHlDb29yZCkge1xuICAgICAgICAgIG9iai5hdHRhY2tlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKG9iai5zaGlwTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm1pc3NlZFNob3RzLnB1c2goeyB4OiB4Q29vcmQsIHk6IHlDb29yZCB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoIChvYmouc2hpcE5hbWUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcIkNhcnJpZXJcIjpcbiAgICAgICAgICAgICAgICB0aGlzLm15RmxlZXRbMF0uaGl0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJCYXR0bGVzaGlwXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5teUZsZWV0WzFdLmhpdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiRGVzdHJveWVyXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5teUZsZWV0WzJdLmhpdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiU3VibWFyaW5lXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5teUZsZWV0WzNdLmhpdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiUGF0cm9sIEJvYXRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLm15RmxlZXRbNF0uaGl0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcGxvdEZsZWV0KCkge1xuICAgICAgbGV0IGZsZWV0ID0gdGhpcy5teUZsZWV0O1xuICAgICAgZmxlZXQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICBsZXQgcGxvdHMgPSBzaGlwLmxvY2F0aW9uO1xuICAgICAgICBwbG90cy5mb3JFYWNoKChjb29yZCkgPT4ge1xuICAgICAgICAgIHRoaXMuZ3JpZC5mb3JFYWNoKChvYmopID0+IHtcbiAgICAgICAgICAgIGlmIChvYmoueCA9PT0gY29vcmQueCAmJiBvYmoueSA9PT0gY29vcmQueSkge1xuICAgICAgICAgICAgICBvYmouc2hpcE5hbWUgPSBzaGlwLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjaGVja1N1bmtTaGlwcygpIHtcbiAgICAgIGxldCBmbGVldCA9IHRoaXMubXlGbGVldDtcbiAgICAgIGZsZWV0LmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgaWYgKHNoaXAuc3VuayA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuc3Vua1NoaXBzLnB1c2goU3RyaW5nKHNoaXAubmFtZSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgY2hlY2tHYW1lT3ZlcigpIHtcbiAgICAgIGlmICh0aGlzLnN1bmtTaGlwcy5sZW5ndGggPT09IDUpIHtcbiAgICAgICAgdGhpcy5pc0dhbWVPdmVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGdhbWVib2FyZCB9O1xuIiwiY29uc3QgcmFuZG9tTnVtWmVyb1RvTmluZSA9ICgpID0+IHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbn07XG5cbmNvbnN0IHJhbmRvbURpcmVjdGlvbiA9ICgpID0+IHtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgbGV0IGNvaW5GbGlwID0gcmFuZG9tTnVtWmVyb1RvTmluZSgpO1xuXG4gIGlmIChjb2luRmxpcCA8PSA0KSB7XG4gICAgZGlyZWN0aW9uID0gXCJob3Jpem9udGFsXCI7XG4gIH0gZWxzZSB7XG4gICAgZGlyZWN0aW9uID0gXCJ2ZXJ0aWNhbFwiO1xuICB9XG5cbiAgcmV0dXJuIGRpcmVjdGlvbjtcbn07XG5cbmNvbnN0IGRldGVybWluZVNhZmVQYXRoID0gKGRpcmVjdGlvbiwgc3RhcnQpID0+IHtcbiAgbGV0IHBhdGg7XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICBpZiAoc3RhcnQueCA8PSA0KSB7XG4gICAgICBwYXRoID0gXCJyaWdodFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gXCJsZWZ0XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgaWYgKHN0YXJ0LnkgPD0gNCkge1xuICAgICAgcGF0aCA9IFwiZG93blwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gXCJ1cFwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyByYW5kb21OdW1aZXJvVG9OaW5lLCByYW5kb21EaXJlY3Rpb24sIGRldGVybWluZVNhZmVQYXRoIH07XG4iLCJjb25zdCB7IGdhbWVib2FyZCB9ID0gcmVxdWlyZShcIi4vZ2FtZWJvYXJkLmpzXCIpO1xuXG5jb25zdCBwbGF5ZXIgPSAobmFtZSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaXNUdXJuOiBmYWxzZSxcbiAgICBib2FyZDogZ2FtZWJvYXJkKCksXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgcGxheWVyIH07XG4iLCJjb25zdCB7XG4gIHJhbmRvbU51bVplcm9Ub05pbmUsXG4gIHJhbmRvbURpcmVjdGlvbixcbiAgZGV0ZXJtaW5lU2FmZVBhdGgsXG59ID0gcmVxdWlyZShcIi4vaGVscGVycy5qc1wiKTtcblxuY29uc3Qgc2hpcCA9ICh0eXBlKSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9ICh0eXBlKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiQ2FycmllclwiOlxuICAgICAgICByZXR1cm4gTnVtYmVyKDUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJCYXR0bGVzaGlwXCI6XG4gICAgICAgIHJldHVybiBOdW1iZXIoNCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkRlc3Ryb3llclwiOlxuICAgICAgICByZXR1cm4gTnVtYmVyKDMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJTdWJtYXJpbmVcIjpcbiAgICAgICAgcmV0dXJuIE51bWJlcigzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiUGF0cm9sIEJvYXRcIjpcbiAgICAgICAgcmV0dXJuIE51bWJlcigyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNoaXAgdHlwZSBwcm92aWRlZFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGdlbmVyYXRlQ29vcmRpbmF0ZXMgPSAocGF0aCwgbGVuZ3RoLCBzdGFydCkgPT4ge1xuICAgIGxldCBsaXN0ID0gW107XG4gICAgbGlzdC5wdXNoKHN0YXJ0KTtcblxuICAgIGlmIChwYXRoID09IFwibGVmdFwiKSB7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3QucHVzaCh7IHg6IHN0YXJ0LnggLSBpLCB5OiBzdGFydC55IH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGF0aCA9PSBcInJpZ2h0XCIpIHtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdC5wdXNoKHsgeDogc3RhcnQueCArIGksIHk6IHN0YXJ0LnkgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXRoID09IFwidXBcIikge1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0LnB1c2goeyB4OiBzdGFydC54LCB5OiBzdGFydC55IC0gaSB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhdGggPT0gXCJkb3duXCIpIHtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdC5wdXNoKHsgeDogc3RhcnQueCwgeTogc3RhcnQueSArIGkgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xuICB9O1xuXG4gIGNvbnN0IHJhbmRvbVBsYWNlbWVudCA9IChzaGlwTGVuZ3RoKSA9PiB7XG4gICAgbGV0IHNoaXBDb29yZGluYXRlcyA9IFtdO1xuICAgIGxldCBzdGFydGluZ1BvaW50ID0ge1xuICAgICAgeDogcmFuZG9tTnVtWmVyb1RvTmluZSgpLFxuICAgICAgeTogcmFuZG9tTnVtWmVyb1RvTmluZSgpLFxuICAgIH07XG5cbiAgICBsZXQgZGlyZWN0aW9uID0gcmFuZG9tRGlyZWN0aW9uKCk7XG5cbiAgICBsZXQgcGF0aCA9IGRldGVybWluZVNhZmVQYXRoKGRpcmVjdGlvbiwgc3RhcnRpbmdQb2ludCk7XG5cbiAgICBzaGlwQ29vcmRpbmF0ZXMgPSBnZW5lcmF0ZUNvb3JkaW5hdGVzKHBhdGgsIHNoaXBMZW5ndGgsIHN0YXJ0aW5nUG9pbnQpO1xuXG4gICAgcmV0dXJuIHNoaXBDb29yZGluYXRlcztcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IHR5cGUsXG4gICAgbGVuZ3RoOiBsZW5ndGgodHlwZSksXG4gICAgaGl0czogMCxcbiAgICBzdW5rOiBmYWxzZSxcbiAgICBsb2NhdGlvbjogcmFuZG9tUGxhY2VtZW50KGxlbmd0aCh0eXBlKSksXG4gICAgaGl0KCkge1xuICAgICAgdGhpcy5oaXRzICs9IDE7XG4gICAgICB0aGlzLmlzU3VuaygpO1xuICAgIH0sXG4gICAgaXNTdW5rKCkge1xuICAgICAgaWYgKHRoaXMuaGl0cyA9PT0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5zdW5rID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IHNoaXAgfTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJjb25zdCB7XG4gIHJlbmRlclBsYXllckNyZWF0aW9uRWwsXG4gIGdlbmVyYXRlR2FtZWJvYXJkRWwsXG59ID0gcmVxdWlyZShcIi4vZG9tQ29udHJvbGxlclwiKTtcbmNvbnN0IHsgcGxheWVyIH0gPSByZXF1aXJlKFwiLi9wbGF5ZXJcIik7XG5cbmNvbnN0IGdhbWUgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgcGxheWVyT25lTmFtZTogdW5kZWZpbmVkLFxuICAgIHBsYXllclR3b05hbWU6IFwiQ29tcHV0ZXJcIixcbiAgICBwbGF5ZXJPbmU6IHVuZGVmaW5lZCxcbiAgICBQbGF5ZXJUd286IHVuZGVmaW5lZCxcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZW5kZXJQbGF5ZXJDcmVhdGlvbkVsKCk7XG4gICAgICB0aGlzLmNhY2hlRG9tKCk7XG4gICAgICB0aGlzLnN0YXJ0RXZlbnRMaXN0ZW5pbmcoKTtcbiAgICB9LFxuICAgIGNhY2hlRG9tOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmZvcm1Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYXllci1jcmVhdGlvbi1jb250YWluZXJcIik7XG4gICAgICB0aGlzLmZvcm1TdWJtaXRCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllclN1Ym1pdFwiKTtcbiAgICAgIHRoaXMuZm9ybUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5ZXJOYW1lXCIpO1xuICAgIH0sXG4gICAgc3RhcnRFdmVudExpc3RlbmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5mb3JtU3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMucGxheWVyT25lTmFtZSA9IHRoaXMuZm9ybUlucHV0LnZhbHVlO1xuICAgICAgICB0aGlzLmZvcm1Db250YWluZXIuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICAgICAgdGhpcy5oYW5kbGVHYW1lU2V0dXAoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaGFuZGxlR2FtZVNldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnBsYXllck9uZSA9IHBsYXllcih0aGlzLnBsYXllck9uZU5hbWUpO1xuICAgICAgdGhpcy5QbGF5ZXJUd28gPSBwbGF5ZXIodGhpcy5wbGF5ZXJUd29OYW1lKTtcbiAgICAgIGdlbmVyYXRlR2FtZWJvYXJkRWwodGhpcy5wbGF5ZXJPbmUpO1xuICAgICAgZ2VuZXJhdGVHYW1lYm9hcmRFbCh0aGlzLlBsYXllclR3byk7XG4gICAgfSxcbiAgfTtcbn07XG5cbmxldCBuZXdHYW1lID0gZ2FtZSgpO1xubmV3R2FtZS5pbml0KCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlbmRlclBsYXllckNyZWF0aW9uRWwiLCJib2R5IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGFpbmVyRWwiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwib3ZlcnZpZXdUZXh0IiwiaW5uZXJUZXh0IiwiZm9ybUVsIiwic2V0QXR0cmlidXRlIiwiaW5wdXRFbCIsInJlcXVpcmVkIiwiYnRuRWwiLCJhcHBlbmRDaGlsZCIsImdlbmVyYXRlR2FtZWJvYXJkRWwiLCJwbGF5ZXIiLCJkYXRhQXJyYXkiLCJib2FyZCIsImdyaWQiLCJtYWluQ29udGFpbmVyIiwidGFibGVDb250YWluZXIiLCJ0YWJsZSIsInBsYXllckhlYWRpbmciLCJuYW1lIiwiaSIsInJvdyIsImoiLCJkYXRhSW5kZXgiLCJsZW5ndGgiLCJjZWxsIiwieCIsInkiLCJzaGlwIiwiZ2FtZWJvYXJkIiwiZ3JpZEFyciIsImlzR2FtZU92ZXIiLCJwdXNoIiwic2hpcE5hbWUiLCJ1bmRlZmluZWQiLCJhdHRhY2tlZCIsImdlbmVyYXRlR3JpZCIsIm1pc3NlZFNob3RzIiwic3Vua1NoaXBzIiwibXlGbGVldCIsInJlY2VpdmVBdHRhY2siLCJ4Q29vcmQiLCJ5Q29vcmQiLCJ0aGlzIiwiZm9yRWFjaCIsIm9iaiIsImhpdCIsInBsb3RGbGVldCIsImxvY2F0aW9uIiwiY29vcmQiLCJjaGVja1N1bmtTaGlwcyIsInN1bmsiLCJTdHJpbmciLCJjaGVja0dhbWVPdmVyIiwicmFuZG9tTnVtWmVyb1RvTmluZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmRvbURpcmVjdGlvbiIsImRpcmVjdGlvbiIsImRldGVybWluZVNhZmVQYXRoIiwic3RhcnQiLCJwYXRoIiwiaXNUdXJuIiwidHlwZSIsIk51bWJlciIsIkVycm9yIiwiaGl0cyIsInNoaXBMZW5ndGgiLCJzaGlwQ29vcmRpbmF0ZXMiLCJzdGFydGluZ1BvaW50IiwibGlzdCIsImdlbmVyYXRlQ29vcmRpbmF0ZXMiLCJyYW5kb21QbGFjZW1lbnQiLCJpc1N1bmsiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicGxheWVyT25lTmFtZSIsInBsYXllclR3b05hbWUiLCJwbGF5ZXJPbmUiLCJQbGF5ZXJUd28iLCJpbml0IiwiY2FjaGVEb20iLCJzdGFydEV2ZW50TGlzdGVuaW5nIiwiZm9ybUNvbnRhaW5lciIsImZvcm1TdWJtaXRCdG4iLCJnZXRFbGVtZW50QnlJZCIsImZvcm1JbnB1dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicHJldmVudERlZmF1bHQiLCJ2YWx1ZSIsImhhbmRsZUdhbWVTZXR1cCJdLCJzb3VyY2VSb290IjoiIn0=