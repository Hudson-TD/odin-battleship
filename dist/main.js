(()=>{var e={496:(e,t,r)=>{const{removeMatchingObjects:a}=r(225);e.exports={computerLegalAttack:function(e){let t=[],r=[];for(let e=0;e<10;e++)for(let t=0;t<10;t++)r.push({x:e,y:t});e.board.missedShots.forEach((e=>{t.push(e)})),e.board.hits.forEach((e=>{t.push(e)}));let i=a(r,t),n=i[Math.floor(Math.random()*i.length)];return console.log(`Random attack: ${n}`),n}}},817:e=>{e.exports={renderPlayerCreationEl:function(){const e=document.querySelector("body");let t=document.createElement("div");t.classList.add("player-creation-container");let r=document.createElement("p");r.innerText="You are about to enter unfamiliar waters in an effort to neutralize enemy ships. Due to thick fog our strategy is simple, fire artillery and observe any contact. Intel suggests the enemy fleet contains 5 ships of varying sizes...\n  \n  Instructions:\n  \n  Using arial reconnaissance order fire on mapped coordinates. Hits will be recorded with an explosion marker, while misses will be indicated with a water marker.";let a=document.createElement("form");a.setAttribute("name","player-creation-form"),a.setAttribute("class","player-creation-form");let i=document.createElement("input");i.setAttribute("id","playerName"),i.setAttribute("type","text"),i.setAttribute("min","1"),i.required=!0,i.setAttribute("max","25"),i.setAttribute("placeholder","Player Name");let n=document.createElement("button");n.setAttribute("id","playerSubmit"),n.setAttribute("type","submit"),n.setAttribute("for","player-creation-form"),n.innerText="Launch Fleet",e.appendChild(t),t.appendChild(a),a.appendChild(r),a.appendChild(i),a.appendChild(n)},generateGameboardEl:function(e){const t=[...e.board.grid],r=document.querySelector(".main-content-container"),a=document.createElement("div"),i=document.createElement("table");i.setAttribute("class","gameboard-table");const n=document.createElement("th");n.innerText=`${e.name}'s Fleet`,a.appendChild(n);for(let r=0;r<10;r++){const a=document.createElement("tr");a.setAttribute("class","gameboard-row");for(let i=0;i<10;i++){const n=10*r+i;if(n<t.length){const r=document.createElement("td");a.appendChild(r),r.setAttribute("data-x",`${t[n].x}`),r.setAttribute("data-y",`${t[n].y}`),r.setAttribute("data-attacked",`${t[n].attacked}`),r.setAttribute("data-ship",`${t[n].shipName}`),r.setAttribute("class","gameboard-tile"),"Computer"===e.name?r.classList.add("enemy-tile"):"Computer"!==e.name&&r.classList.add("player-tile")}}i.appendChild(a)}a.appendChild(i),r.appendChild(a)},handleHitsAndMisses:function(){document.querySelectorAll(".gameboard-tile").forEach((e=>{let t=e.getAttribute("data-attacked"),r=e.getAttribute("data-ship");"true"===t&&"undefined"===r&&e.classList.add("missed"),"true"===t&&"undefined"!==r&&e.classList.add("hit")}))},handlePlayerGrid:function(){document.querySelectorAll(".player-tile").forEach((e=>{"undefined"!==e.getAttribute("data-ship")&&e.classList.add("occupied")}))}}},404:(e,t,r)=>{const{renderPlayerCreationEl:a,generateGameboardEl:i,handleHitsAndMisses:n,handlePlayerGrid:s}=r(817),{player:o}=r(507),{computerLegalAttack:l}=r(496);e.exports={game:()=>({playerOneName:void 0,playerTwoName:"Computer",playerOne:void 0,PlayerTwo:void 0,init:function(){a(),this.cacheDom(),this.startEventListening()},cacheDom:function(){this.formContainer=document.querySelector(".player-creation-container"),this.formSubmitBtn=document.getElementById("playerSubmit"),this.formInput=document.getElementById("playerName")},startEventListening:function(){this.formSubmitBtn.addEventListener("click",(e=>{e.preventDefault(),this.playerOneName=this.formInput.value,this.formContainer.classList.add("hidden"),this.handleGameSetup()}))},handleGameSetup:function(){this.playerOne=o(this.playerOneName),this.PlayerTwo=o(this.playerTwoName),this.handlePlotting(),i(this.playerOne),i(this.PlayerTwo),s(),this.startAttackListening()},startAttackListening:function(){document.querySelectorAll(".enemy-tile").forEach((e=>{e.addEventListener("click",(e=>{e.target.setAttribute("data-attacked","true");let t=e.target.getAttribute("data-x"),r=e.target.getAttribute("data-y");this.PlayerTwo.board.receiveAttack(t,r);let a=l(this.playerOne);this.playerOne.board.receiveAttack(a.x,a.y),document.querySelectorAll(".player-tile").forEach((e=>{let t=e.getAttribute("data-x"),r=e.getAttribute("data-y");t===String(a.x)&&r===String(a.y)&&e.setAttribute("data-attacked","true")})),n()}),{once:!0})}))},handlePlotting:function(){this.playerOne.board.plotFleet(),this.PlayerTwo.board.plotFleet()}})}},498:(e,t,r)=>{const{ship:a}=r(643);e.exports={gameboard:()=>{let e=[];return{isGameOver:!1,grid:(()=>{for(let t=0;t<10;t++)for(let r=0;r<10;r++)e.push({x:t,y:r,shipName:void 0,attacked:!1});return e})(),missedShots:[],hits:[],sunkShips:[],myFleet:[a("Carrier"),a("Battleship"),a("Destroyer"),a("Submarine"),a("Patrol Boat")],receiveAttack:function(e,t){console.log(`Hit logged at ${e},${t}`),this.grid.forEach((r=>{if(r.x==e&&r.y==t)if(r.attacked=!0,void 0===r.shipName)this.missedShots.push({x:e,y:t});else switch(r.shipName){case"Carrier":this.hits.push({x:e,y:t}),this.myFleet[0].hit();break;case"Battleship":this.hits.push({x:e,y:t}),this.myFleet[1].hit();break;case"Destroyer":this.hits.push({x:e,y:t}),this.myFleet[2].hit();break;case"Submarine":this.hits.push({x:e,y:t}),this.myFleet[3].hit();break;case"Patrol Boat":this.hits.push({x:e,y:t}),this.myFleet[4].hit()}})),this.checkSunkShips()},plotFleet:function(){this.myFleet.forEach((e=>{e.location.forEach((t=>{this.grid.forEach((r=>{r.x===t.x&&r.y===t.y&&(r.shipName=e.name)}))}))}))},checkSunkShips:function(){this.myFleet.forEach((e=>{!0!==e.sunk||this.sunkShips.includes(e.name)||this.sunkShips.push(String(e.name)),this.checkGameOver()}))},checkGameOver:function(){5==this.sunkShips.length&&(this.isGameOver=!0,console.log("Game Over Triggered"))}}}}},225:e=>{const t=()=>Math.floor(10*Math.random());e.exports={randomNumZeroToNine:t,randomDirection:()=>{let e;return e=t()<=4?"horizontal":"vertical",e},determineSafePath:(e,t)=>{let r;return"horizontal"===e?r=t.x<=4?"right":"left":"vertical"===e&&(r=t.y<=4?"down":"up"),r},removeMatchingObjects:function(e,t){return e.filter((e=>!t.some((t=>e.x===t.x&&e.y===t.y))))}}},507:(e,t,r)=>{const{gameboard:a}=r(498);e.exports={player:e=>({name:e,isTurn:!1,board:a()})}},643:e=>{e.exports={ship:e=>({name:e,length:(e=>{switch(e){case"Carrier":return Number(5);case"Battleship":return Number(4);case"Destroyer":case"Submarine":return Number(3);case"Patrol Boat":return Number(2);default:throw new Error("Invalid ship type provided")}})(e),hits:0,sunk:!1,location:function(e){switch(e){case"Carrier":return[{x:0,y:0},{x:0,y:1},{x:0,y:2},{x:0,y:3},{x:0,y:4}];case"Battleship":return[{x:9,y:2},{x:9,y:3},{x:9,y:4},{x:9,y:5}];case"Destroyer":return[{x:5,y:4},{x:6,y:4},{x:7,y:4}];case"Submarine":return[{x:8,y:0},{x:8,y:1},{x:8,y:2}];case"Patrol Boat":return[{x:5,y:7},{x:6,y:7}];default:throw new Error("Error generating coordinates")}}(e),hit:function(){this.hits+=1,console.log("Hit detected!"),this.isSunk()},isSunk:function(){this.hits===this.length&&(this.sunk=!0,console.log(`${this.name} has been sunk`))}})}}},t={};function r(a){var i=t[a];if(void 0!==i)return i.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,r),n.exports}(()=>{const{game:e}=r(404);e().init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,